%Read me--------------
% Script for automated processing ASCII files generated by topspin command convbin2asc. This script has initially been made to
% integrate 1H spectra in position of EDTA/Ca2 complex - from 2.9397 to 3.1212 ppm.
% First, process spectra in topspin using commands ‘efp’, ‘apk’ and ‘absn’. 
% (It is recommended to write user script by using command 'edau' and use ‘qumulti’ afterwards to run this user script for all 
% spectra at once). Afterwards, use command ‘qumulti convbin2asc [numbers of expno]’ to export all spectra into asci files. 
% How to use this script:
% Copy this .m file into the parent folder containing your 1H experiments. Make sure all of the spectra are processed and 
% exported into asci files. Open this .m file in Matlab and click the big green RUN button. 
% Outputs:
% Figures (.png files) of individual peaks with the marked integrated area (red line). One .xlsx file containing the name of 
% the experiment (parsed from the title) and integral of the peak.
% Tested on:
% Matlab R2020a (with Bioinformatics and Signal processing toolbox), TopSpin 4.0.8 and Microsoft Excel 2016 v 16.0.5
% Contact author: mar.jakubec@gmail.com
%--------------------
clear all 
close all


% Import spectra ascii files

files = dir('*\pdata\*\ascii-spec.txt');
files_names = dir('*\pdata\*\title');


for i = 1:size(files,1)
addpath(files(i).folder)
out{i} = dlmread(files(1).name,',', 1, 0);
% Import identifier
name{i} = fileread(files_names(i).name);
rmpath(files(i).folder) 
end

%Peak finding + integration

for i = 1:size(files,1)
mtest(:,1) = out{i}(:,4);
mtest(:,2) = out{i}(:,2);
mtest = mtest(out{i}(:,4) > 2.7 & out{i}(:,4)<3.36,:);
mtest = flipud(mtest);

% maxint = max(mtest(:,2));
% [pks,locs,w,p] = findpeaks(mtest(:,2),mtest(:,1),'MinPeakHeight',maxint*0.9,'MinPeakDistance',2);
x = mtest(:,1);
y = mtest(:,2);
figure('units','normalized','outerposition',[0 0 0.7 0.8],'visible','off');
hold on
% findpeaks(mtest(:,2),mtest(:,1),'MinPeakHeight',maxint*0.9,'MinPeakDistance',2,'Annotate','extents');
plot(x,y,'LineWidth',2)
set(gca,'XDir','reverse')
% wid = multiplication of half width
% dataObjs = findobj(h,'-property','YData');
% half_w = dataObjs(1).XData;

% [xData, yData] = prepareCurveData( x, y );
% 
% % Set up fittype and options.
% ft = fittype( 'gauss1' );
% opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
% opts.Display = 'Off';
% opts.Lower = [-Inf -Inf 0];
% opts.Robust = 'LAR';
% opts.StartPoint = [3130 4.684118 0.159643226066292];
% 
% % Fit model to data.
% [fitresult, gof] = fit( xData, yData, ft, opts );
% y_fit = fitresult(x);
% 
% %function builder
% A = mtest(y_fit >(1E-30),1);

left_lim = 2.9397;
right_lim =3.1212;
ind_int = mtest(:,1) > left_lim & mtest(:,1) <  right_lim;
intg = sum(mtest(ind_int,2));
% end of calculation
xlim ([2.7 3.35])
plot(mtest(ind_int,1),zeros(size(mtest(ind_int,1),1)),'r','Linewidth',2);
legend('off')
title(sprintf('%s',name{i}))
xlabel('ppm')
ylabel('intensity')

to_scan = files(i).folder(end-12:end);
ind = regexp(to_scan,'\\');
th = sscanf(to_scan(ind(1):ind(2)),'%*[^0123456789]%d');

print(sprintf('%d.png',th(1)),'-dpng')
close all 
res_int(i,1) = intg; 
% res_ppm(i,1) = locs;
% res_halfwidth(i,1) = w;
clear mtest th h left_lim rigth_lim

end
% 
% % Export resuts in table
names = char(name);
T = table(names,res_int);
T.Properties.VariableNames{'res_int'} = 'Integral';
T.Properties.VariableNames{'names'} = 'Experiment';
% T.Properties.VariableNames{'res_ppm'} = 'ppm';
% T.Properties.VariableNames{'res_halfwidth'} = 'peak_halfwidth';

writetable(T,'Results.xlsx')

clear all 
close all 
% End





